// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  username  String    @unique
  email     String    @unique
  password  String
  role      String

  orders    Order[]
  reviews   Review[]
  downloads Download[]
}

model DataCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String

  dataItems   DataItem[]
}

model DataItem {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  categoryId  Int
  title       String
  description String
  price       Int
  fileUrl     String

  category    DataCategory @relation(fields: [categoryId], references: [id])
  orders      Order[]
  reviews     Review[]
  downloads   Download[]
}

model Order {
  id         Int       @id @default(autoincrement())
  orderId    String    @unique 
  userId     Int
  dataItemId Int
  orderDate  DateTime   @default(now())
  amount     Int
  status     String

  user       User       @relation(fields: [userId], references: [id])
  dataItem   DataItem   @relation(fields: [dataItemId], references: [id])
  payment    Payment?
}

model Review {
  id         Int       @id @default(autoincrement())
  dataItemId Int
  userId     Int
  rating     Int       
  comment    String
  createdAt  DateTime  @default(now())

  user       User      @relation(fields: [userId], references: [id])
  dataItem   DataItem  @relation(fields: [dataItemId], references: [id])
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int      @unique
  amount        Int
  paymentDate   DateTime @default(now())
  paymentMethod String
  status        String

  order         Order    @relation(fields: [orderId], references: [id])
}

model Download {
  id            Int       @id @default(autoincrement())
  userId        Int
  dataItemId    Int
  lastDownloadDate  DateTime   @default(now())
  downloadCount Int        @default(0)

  user          User       @relation(fields: [userId], references: [id])
  dataItem      DataItem   @relation(fields: [dataItemId], references: [id])
}
